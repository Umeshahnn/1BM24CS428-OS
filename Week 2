#include <stdio.h>
#include <string.h>

#define MAX 100

// Structure to represent a process
typedef struct {
    int pid;
    char type[10]; // "system" or "user"
    int arrival_time;
    int burst_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
} Process;

void sort_by_arrival(Process p[], int n) {
    // Simple bubble sort by arrival time
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (p[j].arrival_time > p[j + 1].arrival_time) {
                Process temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }
}

void calculate_times(Process queue[], int n, int *start_time) {
    for (int i = 0; i < n; i++) {
        if (*start_time < queue[i].arrival_time)
            *start_time = queue[i].arrival_time;

        queue[i].completion_time = *start_time + queue[i].burst_time;
        queue[i].turnaround_time = queue[i].completion_time - queue[i].arrival_time;
        queue[i].waiting_time = queue[i].turnaround_time - queue[i].burst_time;

        *start_time = queue[i].completion_time;
    }
}

void print_processes(Process queue[], int n, const char *queue_name) {
    printf("\n%s Processes:\n", queue_name);
    printf("PID\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t\t%d\n",
               queue[i].pid,
               queue[i].arrival_time,
               queue[i].burst_time,
               queue[i].completion_time,
               queue[i].turnaround_time,
               queue[i].waiting_time);
    }
}

int main() {
    int n;
    Process processes[MAX], system_queue[MAX], user_queue[MAX];
    int sys_count = 0, user_count = 0;

    printf("Enter total number of processes: ");
    scanf("%d", &n);

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("\nProcess %d:\n", i + 1);
        processes[i].pid = i + 1;
        printf("Enter type (system/user): ");
        scanf("%s", processes[i].type);
        printf("Enter arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time: ");
        scanf("%d", &processes[i].burst_time);

        // Classify into system and user queues
        if (strcmp(processes[i].type, "system") == 0) {
            system_queue[sys_count++] = processes[i];
        } else {
            user_queue[user_count++] = processes[i];
        }
    }

    // Sort each queue by arrival time
    sort_by_arrival(system_queue, sys_count);
    sort_by_arrival(user_queue, user_count);

    int current_time = 0;

    // First schedule system queue
    calculate_times(system_queue, sys_count, &current_time);

    // Then schedule user queue
    calculate_times(user_queue, user_count, &current_time);

    // Print process details
    print_processes(system_queue, sys_count, "System");
    print_processes(user_queue, user_count, "User");

    return 0;
}
